// <auto-generated />
using System;
using DataAccess.Concrete.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DataAccess.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20200704143504_mig")]
    partial class mig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.OrderNumbers", "'OrderNumbers', '', '4', '1', '', '', 'Int32', 'False'");

            modelBuilder.Entity("Entities.Concrete.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LogTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Entities.Concrete.LogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 57, DateTimeKind.Local).AddTicks(782),
                            Name = "Login"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 57, DateTimeKind.Local).AddTicks(1392),
                            Name = "SendMail"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 57, DateTimeKind.Local).AddTicks(1409),
                            Name = "SendSMS"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 57, DateTimeKind.Local).AddTicks(1411),
                            Name = "DownloadPdf"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 57, DateTimeKind.Local).AddTicks(1414),
                            Name = "ChangePhone"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 57, DateTimeKind.Local).AddTicks(1415),
                            Name = "Error"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 2,
                            CreatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 50, DateTimeKind.Local).AddTicks(3234),
                            Name = "Dealer"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 2,
                            CreatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 54, DateTimeKind.Local).AddTicks(7126),
                            Name = "CallCenterAdmin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 2,
                            CreatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 54, DateTimeKind.Local).AddTicks(7179),
                            Name = "SporToto"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 2,
                            CreatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 54, DateTimeKind.Local).AddTicks(7181),
                            Name = "CallCenter"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"OrderNumbers\"')");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DealerId")
                        .HasColumnType("integer");

                    b.Property<string>("DealerName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Test mah. Test sokak.",
                            City = "İstanbul",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 56, DateTimeKind.Local).AddTicks(6363),
                            DealerId = 123123,
                            DealerName = "iddaa Bayisi",
                            FullName = "Test",
                            IsActive = true,
                            Password = "023a2d11e01237fb6eab5ca926facd39ee44b1683e84295cccef79b7df905195",
                            Phone = "5552223355",
                            RoleId = 1,
                            UpdatedBy = 1,
                            UpdatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 56, DateTimeKind.Local).AddTicks(5732)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 56, DateTimeKind.Local).AddTicks(9742),
                            FullName = "Çağrı Merkezi Admin",
                            IsActive = true,
                            Password = "023a2d11e01237fb6eab5ca926facd39ee44b1683e84295cccef79b7df905195",
                            RoleId = 2,
                            UpdatedBy = 1,
                            UpdatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 56, DateTimeKind.Local).AddTicks(9725)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Test mah. Test sokak.",
                            City = "İstanbul",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 56, DateTimeKind.Local).AddTicks(9784),
                            DealerId = 3,
                            DealerName = "SporToto Ekranı",
                            FullName = "SporToto",
                            IsActive = true,
                            Password = "023a2d11e01237fb6eab5ca926facd39ee44b1683e84295cccef79b7df905195",
                            Phone = "5552223355",
                            RoleId = 3,
                            UpdatedBy = 1,
                            UpdatedDate = new DateTime(2020, 7, 4, 17, 35, 4, 56, DateTimeKind.Local).AddTicks(9782)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
